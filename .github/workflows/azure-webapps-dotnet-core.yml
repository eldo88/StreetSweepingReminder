name: Build, Migrate Database, and Deploy ASP.Net Core app

env:
  AZURE_WEBAPP_NAME: street-sweeping-reminder      # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: '.'                   # path inside the artifact to deploy (usually '.')
  API_PROJECT_PATH: 'StreetSweepingReminder.Api/StreetSweepingReminder.Api.csproj' # Correct relative path to API project
  DOTNET_VERSION: '9.0'              # Specific preview version

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-migrate: # Renamed job for clarity
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.API_PROJECT_PATH }}

      - name: Build project
        run: dotnet build ${{ env.API_PROJECT_PATH }} --configuration Release --no-restore

      # --------------------- Run EF Migration IN BUILD JOB ---------------------
      - name: Install dotnet-ef tool
        run: dotnet tool install --global dotnet-ef
          
      - name: Run EF Core Migrations from Project Directory
          # Set the working directory to the API project's directory
        working-directory: $(dirname ${{ env.API_PROJECT_PATH }})
        run: |
            # Now commands run from within StreetSweepingReminder.Api/
            dotnet ef database update \
              --context ApplicationDbContext \
              --configuration Release \
              # Tool should find output in ./bin/Release/net9.0/
          ConnectionStrings__DefaultConnection: ${{ secrets.AZURE_DB_CONNECTION_STRING }} # Ensure this secret exists
      # ----------------------------------------------------------------------

      - name: Publish project
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --no-build -o ${{env.DOTNET_ROOT}}/myapp # Use DOTNET_ROOT or runner.temp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp # Use the same path as publish output

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build-and-migrate # Depend on the renamed job
    environment:
      name: 'Production' # Or 'Development' - match your setup
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
          # Download to workspace root or specify path
          # path: ./deploy_package # Example specific path

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          # Ensure this path matches where artifact was downloaded/extracted if needed
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} # Usually '.' for artifact root